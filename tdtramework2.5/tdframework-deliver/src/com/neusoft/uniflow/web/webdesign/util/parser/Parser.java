package com.neusoft.uniflow.web.webdesign.util.parser;


//----------------------------------------------------
// The following code was generated by CUP v0.10k
// Thu Jan 16 09:43:37 CST 2003
//----------------------------------------------------



/** CUP v0.10k generated parser.
  * @version Thu Jan 16 09:43:37 CST 2003
  */
public class Parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Production table. */
  protected static final short _production_table[][] =
    unpackFromStrings(new String[] {
    "\000\056\000\002\002\004\000\002\003\003\000\002\003" +
    "\003\000\002\003\002\000\002\003\003\000\002\007\005" +
    "\000\002\007\003\000\002\010\005\000\002\010\003\000" +
    "\002\011\005\000\002\011\005\000\002\011\004\000\002" +
    "\011\003\000\002\012\003\000\002\012\003\000\002\012" +
    "\003\000\002\004\005\000\002\004\005\000\002\004\005" +
    "\000\002\004\005\000\002\004\005\000\002\004\005\000" +
    "\002\013\005\000\002\013\005\000\002\013\003\000\002" +
    "\014\005\000\002\014\005\000\002\014\003\000\002\015" +
    "\005\000\002\015\005\000\002\015\004\000\002\015\003" +
    "\000\002\005\005\000\002\005\005\000\002\005\003\000" +
    "\002\005\003\000\002\016\003\000\002\016\003\000\002" +
    "\006\005\000\002\006\005\000\002\006\005\000\002\006" +
    "\005\000\002\006\005\000\002\006\005\000\002\006\005" +
    "\000\002\006\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table =
    unpackFromStrings(new String[] {
    "\000\114\000\024\002\ufffe\003\023\006\010\007\013\010" +
    "\014\011\011\012\020\014\022\017\012\001\002\000\040" +
    "\002\uffe6\003\uffe6\004\uffe6\005\uffe6\013\uffe6\014\uffe6\015" +
    "\uffe6\016\uffe6\020\uffe6\021\uffe6\022\uffe6\023\uffe6\024\uffe6" +
    "\025\uffe6\026\uffe6\001\002\000\004\025\114\001\002\000" +
    "\014\002\ufffb\003\ufffb\004\ufffb\005\065\020\ufffb\001\002" +
    "\000\024\002\uffff\013\040\014\041\021\054\022\056\023" +
    "\051\024\052\025\055\026\053\001\002\000\020\006\010" +
    "\007\013\010\014\011\011\012\020\014\022\017\012\001" +
    "\002\000\016\002\uffdf\003\uffdf\004\uffdf\005\uffdf\020\uffdf" +
    "\025\uffdd\001\002\000\020\006\010\007\013\010\014\011" +
    "\011\012\020\014\022\017\012\001\002\000\022\021\073" +
    "\022\076\023\067\024\071\025\074\026\072\027\075\030" +
    "\070\001\002\000\040\002\uffe2\003\uffe2\004\uffe2\005\uffe2" +
    "\013\uffe2\014\uffe2\015\uffe2\016\uffe2\020\uffe2\021\uffe2\022" +
    "\uffe2\023\uffe2\024\uffe2\025\uffe2\026\uffe2\001\002\000\006" +
    "\002\000\004\046\001\002\000\014\002\ufff4\003\ufff4\004" +
    "\ufff4\005\ufff4\020\ufff4\001\002\000\014\002\ufff5\003\ufff5" +
    "\004\ufff5\005\ufff5\020\ufff5\001\002\000\016\002\uffde\003" +
    "\uffde\004\uffde\005\uffde\020\uffde\025\uffdc\001\002\000\014" +
    "\002\ufff3\003\ufff3\004\ufff3\005\ufff3\020\ufff3\001\002\000" +
    "\010\010\014\014\022\017\034\001\002\000\004\002\ufffd" +
    "\001\002\000\040\002\uffe9\003\uffe9\004\uffe9\005\uffe9\013" +
    "\uffe9\014\uffe9\015\032\016\031\020\uffe9\021\uffe9\022\uffe9" +
    "\023\uffe9\024\uffe9\025\uffe9\026\uffe9\001\002\000\014\002" +
    "\ufff2\003\ufff2\004\ufff2\005\ufff2\020\ufff2\001\002\000\004" +
    "\002\030\001\002\000\014\002\ufff9\003\ufff9\004\ufff9\005" +
    "\ufff9\020\ufff9\001\002\000\004\002\001\001\002\000\010" +
    "\010\014\014\022\017\034\001\002\000\010\010\014\014" +
    "\022\017\034\001\002\000\040\002\uffe8\003\uffe8\004\uffe8" +
    "\005\uffe8\013\uffe8\014\uffe8\015\uffe8\016\uffe8\020\uffe8\021" +
    "\uffe8\022\uffe8\023\uffe8\024\uffe8\025\uffe8\026\uffe8\001\002" +
    "\000\010\010\014\014\022\017\034\001\002\000\012\003" +
    "\037\013\040\014\041\020\036\001\002\000\040\002\uffe5" +
    "\003\uffe5\004\uffe5\005\uffe5\013\uffe5\014\uffe5\015\uffe5\016" +
    "\uffe5\020\uffe5\021\uffe5\022\uffe5\023\uffe5\024\uffe5\025\uffe5" +
    "\026\uffe5\001\002\000\040\002\uffe4\003\uffe4\004\uffe4\005" +
    "\uffe4\013\uffe4\014\uffe4\015\uffe4\016\uffe4\020\uffe4\021\uffe4" +
    "\022\uffe4\023\uffe4\024\uffe4\025\uffe4\026\uffe4\001\002\000" +
    "\010\010\014\014\022\017\034\001\002\000\010\010\014" +
    "\014\022\017\034\001\002\000\040\002\uffea\003\uffea\004" +
    "\uffea\005\uffea\013\uffea\014\uffea\015\032\016\031\020\uffea" +
    "\021\uffea\022\uffea\023\uffea\024\uffea\025\uffea\026\uffea\001" +
    "\002\000\040\002\uffeb\003\uffeb\004\uffeb\005\uffeb\013\uffeb" +
    "\014\uffeb\015\032\016\031\020\uffeb\021\uffeb\022\uffeb\023" +
    "\uffeb\024\uffeb\025\uffeb\026\uffeb\001\002\000\040\002\uffe7" +
    "\003\uffe7\004\uffe7\005\uffe7\013\uffe7\014\uffe7\015\uffe7\016" +
    "\uffe7\020\uffe7\021\uffe7\022\uffe7\023\uffe7\024\uffe7\025\uffe7" +
    "\026\uffe7\001\002\000\040\002\uffe3\003\uffe3\004\uffe3\005" +
    "\uffe3\013\uffe3\014\uffe3\015\uffe3\016\uffe3\020\uffe3\021\uffe3" +
    "\022\uffe3\023\uffe3\024\uffe3\025\uffe3\026\uffe3\001\002\000" +
    "\020\006\010\007\013\010\014\011\011\012\020\014\022" +
    "\017\012\001\002\000\014\002\ufffc\003\ufffc\004\ufffc\005" +
    "\065\020\ufffc\001\002\000\022\013\040\014\041\021\054" +
    "\022\056\023\051\024\052\025\055\026\053\001\002\000" +
    "\010\010\014\014\022\017\034\001\002\000\010\010\014" +
    "\014\022\017\034\001\002\000\010\010\014\014\022\017" +
    "\034\001\002\000\010\010\014\014\022\017\034\001\002" +
    "\000\010\010\014\014\022\017\034\001\002\000\010\010" +
    "\014\014\022\017\034\001\002\000\020\002\uffef\003\uffef" +
    "\004\uffef\005\uffef\013\040\014\041\020\uffef\001\002\000" +
    "\020\002\ufff1\003\ufff1\004\ufff1\005\ufff1\013\040\014\041" +
    "\020\ufff1\001\002\000\020\002\ufff0\003\ufff0\004\ufff0\005" +
    "\ufff0\013\040\014\041\020\ufff0\001\002\000\020\002\uffec" +
    "\003\uffec\004\uffec\005\uffec\013\040\014\041\020\uffec\001" +
    "\002\000\020\002\uffed\003\uffed\004\uffed\005\uffed\013\040" +
    "\014\041\020\uffed\001\002\000\020\002\uffee\003\uffee\004" +
    "\uffee\005\uffee\013\040\014\041\020\uffee\001\002\000\020" +
    "\006\010\007\013\010\014\011\011\012\020\014\022\017" +
    "\012\001\002\000\014\002\ufffa\003\ufffa\004\ufffa\005\ufffa" +
    "\020\ufffa\001\002\000\004\007\106\001\002\000\004\007" +
    "\105\001\002\000\004\007\104\001\002\000\004\007\103" +
    "\001\002\000\004\007\102\001\002\000\004\007\101\001" +
    "\002\000\004\007\100\001\002\000\004\007\077\001\002" +
    "\000\014\002\uffd5\003\uffd5\004\uffd5\005\uffd5\020\uffd5\001" +
    "\002\000\014\002\uffdb\003\uffdb\004\uffdb\005\uffdb\020\uffdb" +
    "\001\002\000\014\002\uffd9\003\uffd9\004\uffd9\005\uffd9\020" +
    "\uffd9\001\002\000\014\002\uffd7\003\uffd7\004\uffd7\005\uffd7" +
    "\020\uffd7\001\002\000\014\002\uffd8\003\uffd8\004\uffd8\005" +
    "\uffd8\020\uffd8\001\002\000\014\002\uffd4\003\uffd4\004\uffd4" +
    "\005\uffd4\020\uffd4\001\002\000\014\002\uffda\003\uffda\004" +
    "\uffda\005\uffda\020\uffda\001\002\000\014\002\uffd6\003\uffd6" +
    "\004\uffd6\005\uffd6\020\uffd6\001\002\000\026\003\037\013" +
    "\040\014\041\020\036\021\054\022\056\023\051\024\052" +
    "\025\055\026\053\001\002\000\010\003\112\004\046\020" +
    "\111\001\002\000\014\002\ufff8\003\ufff8\004\ufff8\005\ufff8" +
    "\020\ufff8\001\002\000\014\002\ufff7\003\ufff7\004\ufff7\005" +
    "\ufff7\020\ufff7\001\002\000\014\002\ufff6\003\ufff6\004\ufff6" +
    "\005\ufff6\020\ufff6\001\002\000\006\011\115\012\116\001" +
    "\002\000\014\002\uffe1\003\uffe1\004\uffe1\005\uffe1\020\uffe1" +
    "\001\002\000\014\002\uffe0\003\uffe0\004\uffe0\005\uffe0\020" +
    "\uffe0\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table =
    unpackFromStrings(new String[] {
    "\000\114\000\032\003\025\004\015\005\020\006\024\007" +
    "\014\010\005\011\026\012\016\013\006\014\023\015\003" +
    "\016\004\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\024\004\015\005\020" +
    "\006\024\011\112\012\016\013\047\014\023\015\003\016" +
    "\004\001\001\000\002\001\001\000\030\004\015\005\020" +
    "\006\024\007\107\010\005\011\026\012\016\013\106\014" +
    "\023\015\003\016\004\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\015\044" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\015\043\001\001\000\004\015\032\001\001\000" +
    "\002\001\001\000\010\013\034\014\023\015\003\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\014\042\015\003\001\001\000\006\014\041\015\003" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\026\004\015\005\020\006\024" +
    "\010\046\011\026\012\016\013\047\014\023\015\003\016" +
    "\004\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\013\063\014\023\015\003\001\001\000\010\013\062\014" +
    "\023\015\003\001\001\000\010\013\061\014\023\015\003" +
    "\001\001\000\010\013\060\014\023\015\003\001\001\000" +
    "\010\013\057\014\023\015\003\001\001\000\010\013\056" +
    "\014\023\015\003\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\024\004\015\005\020\006\024\011" +
    "\065\012\016\013\047\014\023\015\003\016\004\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {

    }

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
  return super.getScanner().next_token();
    }



	//public boolean m_Result;

	public void report_error(String message, Object info)
	{
	    StringBuffer m = new StringBuffer("Error ");

	    if (info instanceof java_cup.runtime.Symbol)
	    	m.append( "("+info.toString()+")" );

	    m.append(" : "+message);

	    throw new RuntimeException(m.toString());

	}

	public void report_fatal_error(String message, Object info)
	{
	    report_error(message, info);
	    throw new RuntimeException("Fatal Syntax Error");
	}


}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {


  private final Parser parser;

  /** Constructor */
  CUP$parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // StrRelat ::= STRING OP_GE STRING
            {
              Boolean RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
			if (e1.compareTo(e2) >= 0)
			  		RESULT = new Boolean(true);
				else
				  	RESULT = new Boolean(false);

              CUP$parser$result = new java_cup.runtime.Symbol(4/*StrRelat*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // StrRelat ::= STRING OP_GT STRING
            {
              Boolean RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
			if (e1.compareTo(e2) > 0)
			  		RESULT = new Boolean(true);
				else
				  	RESULT = new Boolean(false);

              CUP$parser$result = new java_cup.runtime.Symbol(4/*StrRelat*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // StrRelat ::= STRING OP_LE STRING
            {
              Boolean RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
			if (e1.compareTo(e2) <= 0)
			  		RESULT = new Boolean(true);
				else
				  	RESULT = new Boolean(false);

              CUP$parser$result = new java_cup.runtime.Symbol(4/*StrRelat*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // StrRelat ::= STRING OP_LT STRING
            {
              Boolean RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
			if (e1.compareTo(e2) < 0)
			  		RESULT = new Boolean(true);
				else
				  	RESULT = new Boolean(false);

              CUP$parser$result = new java_cup.runtime.Symbol(4/*StrRelat*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // StrRelat ::= STRING OP_NE STRING
            {
              Boolean RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
			if (e1.compareTo(e2) != 0)
			  		RESULT = new Boolean(true);
				else
				  	RESULT = new Boolean(false);

              CUP$parser$result = new java_cup.runtime.Symbol(4/*StrRelat*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // StrRelat ::= STRING OP_EQ STRING
            {
              Boolean RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
			if (e1.compareTo(e2) == 0)
					RESULT = new Boolean(true);
				else
				 	RESULT = new Boolean(false);

              CUP$parser$result = new java_cup.runtime.Symbol(4/*StrRelat*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // StrRelat ::= STRING OP_INCLUDE STRING
            {
              Boolean RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
			if (e1.indexOf(e2) >= 0)
					RESULT = new Boolean(true);
				else
				 	RESULT = new Boolean(false);

              CUP$parser$result = new java_cup.runtime.Symbol(4/*StrRelat*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // StrRelat ::= STRING OP_IN STRING
            {
              Boolean RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 	if (e2.indexOf(e1) >= 0)
					RESULT = new Boolean(true);
			  	else
					RESULT = new Boolean(false);

              CUP$parser$result = new java_cup.runtime.Symbol(4/*StrRelat*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // BoolFunc ::= FALSE
            {
              Boolean RESULT = null;
		 RESULT = new Boolean(false);
              CUP$parser$result = new java_cup.runtime.Symbol(12/*BoolFunc*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // BoolFunc ::= TRUE
            {
              Boolean RESULT = null;
		 RESULT = new Boolean(true);
              CUP$parser$result = new java_cup.runtime.Symbol(12/*BoolFunc*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // BoolRelat ::= FALSE
            {
              Boolean RESULT = null;
		 RESULT = new Boolean(false);
              CUP$parser$result = new java_cup.runtime.Symbol(3/*BoolRelat*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // BoolRelat ::= TRUE
            {
              Boolean RESULT = null;
		 RESULT = new Boolean(true);
              CUP$parser$result = new java_cup.runtime.Symbol(3/*BoolRelat*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // BoolRelat ::= BoolFunc OP_EQ FALSE
            {
              Boolean RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Boolean e1 = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new Boolean(e1.booleanValue() == false);
              CUP$parser$result = new java_cup.runtime.Symbol(3/*BoolRelat*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // BoolRelat ::= BoolFunc OP_EQ TRUE
            {
              Boolean RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Boolean e1 = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new Boolean(e1.booleanValue() == true);
              CUP$parser$result = new java_cup.runtime.Symbol(3/*BoolRelat*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // Factor ::= NUMBER
            {
              Double RESULT = null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		java.lang.Double n = (java.lang.Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = n;
              CUP$parser$result = new java_cup.runtime.Symbol(11/*Factor*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // Factor ::= MINUS Factor
            {
              Double RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Double e = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new Double(0 - e.doubleValue());
              CUP$parser$result = new java_cup.runtime.Symbol(11/*Factor*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // Factor ::= LPAREN Arithmetic error
            {
              Double RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Double e = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = e; /*throw new RuntimeException("missing ')'");*/
              CUP$parser$result = new java_cup.runtime.Symbol(11/*Factor*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // Factor ::= LPAREN Arithmetic RPAREN
            {
              Double RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Double e = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = e;
              CUP$parser$result = new java_cup.runtime.Symbol(11/*Factor*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // Term ::= Factor
            {
              Double RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Double e = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = e;
              CUP$parser$result = new java_cup.runtime.Symbol(10/*Term*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // Term ::= Term DIVIDE Factor
            {
              Double RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Double e1 = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Double e2 = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		  //if (e2.doubleValue() != 0)
					RESULT = new Double(e1.doubleValue() / e2.doubleValue());
			    //else
					//throw new RuntimeException("Error, Divided by zero!");

              CUP$parser$result = new java_cup.runtime.Symbol(10/*Term*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // Term ::= Term TIMES Factor
            {
              Double RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Double e1 = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Double e2 = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new Double(e1.doubleValue() * e2.doubleValue());
              CUP$parser$result = new java_cup.runtime.Symbol(10/*Term*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // Arithmetic ::= Term
            {
              Double RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Double e = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = e;
              CUP$parser$result = new java_cup.runtime.Symbol(9/*Arithmetic*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // Arithmetic ::= Arithmetic MINUS Term
            {
              Double RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Double e1 = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Double e2 = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new Double(e1.doubleValue() - e2.doubleValue());
              CUP$parser$result = new java_cup.runtime.Symbol(9/*Arithmetic*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // Arithmetic ::= Arithmetic PLUS Term
            {
              Double RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Double e1 = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Double e2 = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new Double(e1.doubleValue() + e2.doubleValue());
              CUP$parser$result = new java_cup.runtime.Symbol(9/*Arithmetic*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // MathRelat ::= Arithmetic OP_NE Arithmetic
            {
              Boolean RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Double e1 = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Double e2 = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new Boolean(e1.doubleValue() != e2.doubleValue());
              CUP$parser$result = new java_cup.runtime.Symbol(2/*MathRelat*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // MathRelat ::= Arithmetic OP_GE Arithmetic
            {
              Boolean RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Double e1 = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Double e2 = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new Boolean(e1.doubleValue() >= e2.doubleValue());
              CUP$parser$result = new java_cup.runtime.Symbol(2/*MathRelat*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // MathRelat ::= Arithmetic OP_LE Arithmetic
            {
              Boolean RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Double e1 = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Double e2 = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new Boolean(e1.doubleValue() <= e2.doubleValue());
              CUP$parser$result = new java_cup.runtime.Symbol(2/*MathRelat*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // MathRelat ::= Arithmetic OP_GT Arithmetic
            {
              Boolean RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Double e1 = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Double e2 = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new Boolean(e1.doubleValue() > e2.doubleValue());
              CUP$parser$result = new java_cup.runtime.Symbol(2/*MathRelat*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // MathRelat ::= Arithmetic OP_LT Arithmetic
            {
              Boolean RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Double e1 = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Double e2 = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new Boolean(e1.doubleValue() < e2.doubleValue());
              CUP$parser$result = new java_cup.runtime.Symbol(2/*MathRelat*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // MathRelat ::= Arithmetic OP_EQ Arithmetic
            {
              Boolean RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Double e1 = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Double e2 = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new Boolean(e1.doubleValue() == e2.doubleValue());
              CUP$parser$result = new java_cup.runtime.Symbol(2/*MathRelat*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // RelatExpr ::= StrRelat
            {
              Boolean RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Boolean e = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = e;
              CUP$parser$result = new java_cup.runtime.Symbol(8/*RelatExpr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // RelatExpr ::= BoolRelat
            {
              Boolean RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Boolean e = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = e;
              CUP$parser$result = new java_cup.runtime.Symbol(8/*RelatExpr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // RelatExpr ::= MathRelat
            {
              Boolean RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Boolean e = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = e;
              CUP$parser$result = new java_cup.runtime.Symbol(8/*RelatExpr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // LogicFactor ::= RelatExpr
            {
              Boolean RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Boolean e = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = e;
              CUP$parser$result = new java_cup.runtime.Symbol(7/*LogicFactor*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // LogicFactor ::= NOT LogicFactor
            {
              Boolean RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Boolean e = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new Boolean(!e.booleanValue());
              CUP$parser$result = new java_cup.runtime.Symbol(7/*LogicFactor*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // LogicFactor ::= LPAREN LogicExpr error
            {
              Boolean RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Boolean e = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = e; /*throw new RuntimeException("missing ')'");*/
              CUP$parser$result = new java_cup.runtime.Symbol(7/*LogicFactor*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // LogicFactor ::= LPAREN LogicExpr RPAREN
            {
              Boolean RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Boolean e = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = e;
              CUP$parser$result = new java_cup.runtime.Symbol(7/*LogicFactor*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // LogicTerm ::= LogicFactor
            {
              Boolean RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Boolean e = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = e;
              CUP$parser$result = new java_cup.runtime.Symbol(6/*LogicTerm*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // LogicTerm ::= LogicTerm AND LogicFactor
            {
              Boolean RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Boolean e1 = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Boolean e2 = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new Boolean(e1.booleanValue() && e2.booleanValue());
              CUP$parser$result = new java_cup.runtime.Symbol(6/*LogicTerm*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // LogicExpr ::= LogicTerm
            {
              Boolean RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Boolean e = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = e;
              CUP$parser$result = new java_cup.runtime.Symbol(5/*LogicExpr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // LogicExpr ::= LogicExpr OR LogicTerm
            {
              Boolean RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Boolean e1 = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Boolean e2 = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new Boolean(e1.booleanValue() || e2.booleanValue());
              CUP$parser$result = new java_cup.runtime.Symbol(5/*LogicExpr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // Program ::= error
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(1/*Program*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // Program ::=
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(1/*Program*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
              parser.report_error("fatal error",null);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // Program ::= Arithmetic
            {
              Object RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Double e = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;

				 RESULT = e;

              CUP$parser$result = new java_cup.runtime.Symbol(1/*Program*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // Program ::= LogicExpr
            {
              Object RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Boolean e = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
			/*if (e.booleanValue())
					parser.m_Result = true;
				else
					parser.m_Result = false;*/
				RESULT = e;

              CUP$parser$result = new java_cup.runtime.Symbol(1/*Program*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= Program EOF
            {
              Object RESULT = null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = new java_cup.runtime.Symbol(0/*$START*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

